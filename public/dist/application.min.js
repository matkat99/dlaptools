"use strict";var ApplicationConfiguration=function(){var applicationModuleName="dlaptools",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","underscore"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("adobe-connect"),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("link-checker"),ApplicationConfiguration.registerModule("users"),angular.module("adobe-connect").config(["$stateProvider",function($stateProvider){$stateProvider.state("adobe-connect",{url:"/adobe-connect",templateUrl:"modules/adobe-connect/views/adobe-connect.client.view.html"})}]),angular.module("adobe-connect").controller("AdobeConnectController",["$scope",function(){}]),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles"),Menus.addMenuItem("topbar","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.title="",this.content=""},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender}),this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("myHttpInterceptor",function(){return{response:function(response){return"object"!=typeof response.data&&"jsonp"===response.config.method&&(response.data='{ "response": "'+response.data+'"}'),response}}}).config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push("myHttpInterceptor")}]).factory("dataResource",["$http","$q","_",function($http,$q,_){function addRouteIfMissing(params){var firstParam=params[0];_.isNumber(firstParam)||_.isString(firstParam)||params.unshift("")}function doHttp(params){return _.isEmpty(params.config)&&(params.config={}),_.isEmpty(params.requestParams)||(params.config.params=params.requestParams),_.isUndefined(params.route)||_.isEmpty(params.route.toString())||(params.route="/"+params.route),_.isEmpty(params.data)||(params.config.data=params.data),params.config.url=baseUrl+params.resourceUrl+params.route,params.config.method=params.action,$http(params.config)}function resourceAction(action,resourceUrl,hasData){return function(){var argumentsArray=_.toArray(arguments);addRouteIfMissing(argumentsArray);var argumentNames=hasData?["route","data","requestParams","config"]:["route","requestParams","config"],params=_.object(argumentNames,argumentsArray);return params.action=action,params.resourceUrl=resourceUrl,promiseData(doHttp(params))}}function promiseData(request){var deferred=$q.defer();return request.then(function(response){deferred.resolve(response.data)}).catch(function(response){deferred.reject(response)}),deferred.promise}function newSubResource(){return newResource(_.toArray(arguments).join("/"))}function newResource(url){var resource=_.partial(newSubResource,url);return _.extend(resource,{get:resourceAction("GET",url,!1),"delete":resourceAction("DELETE",url,!1),head:resourceAction("HEAD",url,!1),jsonp:resourceAction("JSONP",url,!1),post:resourceAction("POST",url,!0),put:resourceAction("PUT",url,!0)})}var baseUrl="https://byui.brainhoney.com/Admin/";return{newResource:newResource}}]),angular.module("link-checker").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Link Checker","link-checker")}]),angular.module("link-checker").config(["$stateProvider",function($stateProvider){$stateProvider.state("link-checker",{url:"/link-checker",templateUrl:"modules/link-checker/views/link-checker.client.view.html"})}]),angular.module("link-checker").controller("LinkCheckerController",["$scope","$http","$q","Authentication","dlapRepository","_",function($scope,$http,$q,Authentication,dlapRepository){$scope.authentication=Authentication,$scope.domain={},$scope.domains=[],$scope.course={},$scope.courses=[],$scope.courseItems=[],$scope.courseManifest={},$scope.courseid=null,$scope.audit={},$scope.method="jsonp",$scope.urls=null,$scope.validated=[],$scope.list=[],dlapRepository.getDomains().then(function(data){$scope.domains=data.response.domains.domain}),$scope.getCourses=function(domain){dlapRepository.getCourseList(domain).then(function(data){$scope.courses=data.response.courses.course})};var getCourseItems=function(course){dlapRepository.getItemList(course).then(function(data){$scope.courseItems=data.response})};$scope.$watch("domain",function(newVal,oldval){newVal!==oldval&&$scope.getCourses(newVal)}),$scope.getUrls=function(text){for(var matchArray,source=(text||"").toString(),urlArray=[],regexToken=/(((ftp|https?):\/\/)[\-\w\ @:%_\+.~#?,&\/\/=]+)/g;null!==(matchArray=regexToken.exec(source));){var token=matchArray[0];urlArray.push(token)}return urlArray},$scope.getInternalUrls=function(text){for(var matchArray,source=(text||"").toString(),urlArray=[],regexToken=/(navToItem[\(\'\-\w\'\)]+)/g;null!==(matchArray=regexToken.exec(source));){var token=matchArray[0];urlArray.push(token)}return urlArray},$scope.getResourceUrls=function(text){for(var matchArray,source=(text||"").toString(),urlArray=[],regexToken=/(\[~\]\/[\-\w\ \%\()]+[\.\w]+)/g;null!==(matchArray=regexToken.exec(source));){var token=matchArray[0];urlArray.push(token)}return urlArray};var getItemId=function(text){var path=text.explode("/");return console.log(path),path[2]};$scope.checkUrls=function(){$scope.validated={},$http.post("link-checker/check",$scope.list).success(function(data,status){$scope.status=status,$scope.validated=data}).error(function(data,status){$scope.status=status})},$scope.$watch("course",function(newVal,oldval){if(newVal!==oldval){getCourseItems(newVal),dlapRepository.getItemList(newVal).then(function(data){$scope.courseItems=data.response.items.item}),$scope.courseid=newVal.id;for(var len=$scope.courseItems.length,type={},i=0;len>i;i++){var item=$scope.courseItems[i];"undefined"!=typeof type[item.data.type.$value]?type[item.data.type.$value]++:type[item.data.type.$value]=0}$scope.audit.type=type}});var getResourceList=function(){return dlapRepository.getResourceList($scope.courseid)},getResource=function(courseid,path){return dlapRepository.getResource(courseid,path)},searchCourse=function(query,course,start,results){var Results=results||[],batch={},deferred=$q.defer();return dlapRepository.searchCourse(query,course,start).then(function(data){var xml=data.response.results.$xml.replace("\n","");xml=xml.replace("\r",""),batch=xml2json(xml," "),void 0!==batch.result.doc?(Results=Results.concat(batch.result.doc),deferred.resolve(searchCourse(query,course,start+25,Results))):deferred.resolve(Results)}),deferred.promise};$scope.query2=function(){var resources=[];getResourceList().then(function(res){resources=res.response.resources.resource,angular.forEach(resources,function(value){value.path.indexOf("Asset")<0?getResource($scope.courseid,value.path).then(function(res){value.html=res,value.urls=$scope.getUrls(value.html),angular.forEach(value.urls,function(uvalue){$scope.list.push({entityid:value.entityid,itemid:getItemId(value.path),url:uvalue,type:"ext"})}),value.internalUrls=$scope.getInternalUrls(value.arr[0].str),angular.forEach(value.internalUrls,function(){$scope.list.push({entityid:value.entityid,itemid:getItemId(value.path),url:"https://byui.brainhoney.com/Frame/Component/CoursePlayer?enrollmentid="+value.entityid+"&itemid="+getItemId(value.path),type:"int"})})},function(res){console.log(res)}):console.log("asset")})})},$scope.query=function(query){$scope.list=[],searchCourse(query,$scope.courseid,0).then(function(data){$scope.urls=data,angular.forEach(data,function(value){angular.forEach(value.arr,function(arrValue){("dlap_html_text"===arrValue.undefined.name||"dlap_links"===arrValue.undefined.name)&&(value.urls=$scope.getUrls(arrValue.str),value.internalUrls=$scope.getInternalUrls(arrValue.str),value.resourceUrls=$scope.getResourceUrls(arrValue.str))}),angular.forEach(value.urls,function(uvalue){$scope.list.push({entityid:value.undefined.entityid,itemid:value.undefined.itemid,title:value.str[2].undefined,url:uvalue,type:"ext"})}),angular.forEach(value.internalUrls,function(){$scope.list.push({entityid:value.undefined.entityid,itemid:value.undefined.itemid,title:value.str[2].undefined,url:"https://byui.brainhoney.com/Frame/Component/CoursePlayer?enrollmentid="+value.undefined.entityid+"&itemid="+value.undefined.itemid,type:"int"})}),angular.forEach(value.resourceUrls,function(uvalue){$scope.list.push({entityid:value.undefined.entityid,itemid:value.undefined.itemid,title:value.str[2].undefined,url:"https://byui.brainhoney.com/Resource/"+value.undefined.entityid+"/Assets/"+uvalue.replace("[~]/",""),type:"res"})})}),$scope.list.length>0&&$scope.checkUrls()})}}]),angular.module("link-checker").factory("dlapRepository",["dataResource","$q",function(dataResource){function resetParams(){params={},params.format="JSON",params.callback="JSON_CALLBACK"}var Dlap=dataResource.newResource("Admin.ashx"),params={};return{Dlap:Dlap,getDomains:function(){return resetParams(),params.cmd="listdomains",params.domainid=0,params.query="/id in (1428365,15601242,17414961,10869190,1678022,1912820,2474683,2522027)",Dlap.jsonp(params)},getUser:function(){return resetParams(),params.cmd="getuser",Dlap.jsonp(params)},getCourseList:function(domain){return resetParams(),params.cmd="listcourses",params.domainid=domain.id,params.limit=0,params.text="S14",Dlap.jsonp(params)},getItemList:function(course){return resetParams(),params.cmd="getitemlist",params.entityid=course.id,Dlap.jsonp(params)},getCourseManifest:function(course){return resetParams(),params.cmd="getmanifest",params.entityid=course.id,Dlap.jsonp(params)},getResourceList:function(entityid){return resetParams(),params.cmd="getresourcelist2",params.entityid=entityid,Dlap.jsonp(params)},getResource:function(entityid,path){return resetParams(),params.cmd="getresource",params.entityid=entityid,params.path=path,Dlap.jsonp(params)},searchCourse:function(query,entityid,start){return resetParams(),params.cmd="search",params.entityid=entityid,params.query=query,params.rows=25,params.start=start,Dlap.jsonp(params)}}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/signin.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);